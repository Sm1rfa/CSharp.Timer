//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.Serialization;

namespace TimerControlPanel.Connected_Services.TimerService {
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="UserDataMember", Namespace="http://schemas.datacontract.org/2004/07/Timer.Wcf.DataMembers")]
    [Serializable()]
    public partial class UserDataMember : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string AccountField;
        
        [OptionalField()]
        private Department DepartmentField;
        
        [OptionalField()]
        private string EmailField;
        
        [OptionalField()]
        private string FirstnameField;
        
        [OptionalField()]
        private string FullNameField;
        
        [OptionalField()]
        private bool IsAdminField;
        
        [OptionalField()]
        private string LastnameField;
        
        [OptionalField()]
        private string PasswordField;
        
        [OptionalField()]
        private Project[] ProjectsField;
        
        [OptionalField()]
        private Time[] TimesField;
        
        [OptionalField()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [DataMember()]
        public Department Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [DataMember()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [DataMember()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [DataMember()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [DataMember()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [DataMember()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [DataMember()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [DataMember()]
        public Project[] Projects {
            get {
                return this.ProjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectsField, value) != true)) {
                    this.ProjectsField = value;
                    this.RaisePropertyChanged("Projects");
                }
            }
        }
        
        [DataMember()]
        public Time[] Times {
            get {
                return this.TimesField;
            }
            set {
                if ((object.ReferenceEquals(this.TimesField, value) != true)) {
                    this.TimesField = value;
                    this.RaisePropertyChanged("Times");
                }
            }
        }
        
        [DataMember()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Department", Namespace="http://schemas.datacontract.org/2004/07/Timer.Context.Models")]
    [Serializable()]
    public partial class Department : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string DepartmentEmailField;
        
        [OptionalField()]
        private int DepartmentIdField;
        
        [OptionalField()]
        private string DepartmentNameField;
        
        [OptionalField()]
        private User[] UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string DepartmentEmail {
            get {
                return this.DepartmentEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentEmailField, value) != true)) {
                    this.DepartmentEmailField = value;
                    this.RaisePropertyChanged("DepartmentEmail");
                }
            }
        }
        
        [DataMember()]
        public int DepartmentId {
            get {
                return this.DepartmentIdField;
            }
            set {
                if ((this.DepartmentIdField.Equals(value) != true)) {
                    this.DepartmentIdField = value;
                    this.RaisePropertyChanged("DepartmentId");
                }
            }
        }
        
        [DataMember()]
        public string DepartmentName {
            get {
                return this.DepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentNameField, value) != true)) {
                    this.DepartmentNameField = value;
                    this.RaisePropertyChanged("DepartmentName");
                }
            }
        }
        
        [DataMember()]
        public User[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Project", Namespace="http://schemas.datacontract.org/2004/07/Timer.Context.Models")]
    [Serializable()]
    public partial class Project : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string ProjectDescriptionField;
        
        [OptionalField()]
        private int ProjectIdField;
        
        [OptionalField()]
        private string ProjectNameField;
        
        [OptionalField()]
        private Time[] TimesField;
        
        [OptionalField()]
        private User[] UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string ProjectDescription {
            get {
                return this.ProjectDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectDescriptionField, value) != true)) {
                    this.ProjectDescriptionField = value;
                    this.RaisePropertyChanged("ProjectDescription");
                }
            }
        }
        
        [DataMember()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [DataMember()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [DataMember()]
        public Time[] Times {
            get {
                return this.TimesField;
            }
            set {
                if ((object.ReferenceEquals(this.TimesField, value) != true)) {
                    this.TimesField = value;
                    this.RaisePropertyChanged("Times");
                }
            }
        }
        
        [DataMember()]
        public User[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Time", Namespace="http://schemas.datacontract.org/2004/07/Timer.Context.Models")]
    [Serializable()]
    public partial class Time : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private int BreakField;
        
        [OptionalField()]
        private string EndTimeField;
        
        [OptionalField()]
        private string NoteField;
        
        [OptionalField()]
        private Project[] ProjectsField;
        
        [OptionalField()]
        private string StartTimeField;
        
        [OptionalField()]
        private int TimeIdField;
        
        [OptionalField()]
        private User[] UsersField;
        
        [OptionalField()]
        private System.DateTime WorkDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public int Break {
            get {
                return this.BreakField;
            }
            set {
                if ((this.BreakField.Equals(value) != true)) {
                    this.BreakField = value;
                    this.RaisePropertyChanged("Break");
                }
            }
        }
        
        [DataMember()]
        public string EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EndTimeField, value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [DataMember()]
        public string Note {
            get {
                return this.NoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteField, value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
        
        [DataMember()]
        public Project[] Projects {
            get {
                return this.ProjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectsField, value) != true)) {
                    this.ProjectsField = value;
                    this.RaisePropertyChanged("Projects");
                }
            }
        }
        
        [DataMember()]
        public string StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.StartTimeField, value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [DataMember()]
        public int TimeId {
            get {
                return this.TimeIdField;
            }
            set {
                if ((this.TimeIdField.Equals(value) != true)) {
                    this.TimeIdField = value;
                    this.RaisePropertyChanged("TimeId");
                }
            }
        }
        
        [DataMember()]
        public User[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        [DataMember()]
        public System.DateTime WorkDate {
            get {
                return this.WorkDateField;
            }
            set {
                if ((this.WorkDateField.Equals(value) != true)) {
                    this.WorkDateField = value;
                    this.RaisePropertyChanged("WorkDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Timer.Context.Models")]
    [Serializable()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string AccountField;
        
        [OptionalField()]
        private Department DepartmentField;
        
        [OptionalField()]
        private string EmailField;
        
        [OptionalField()]
        private string FirstnameField;
        
        [OptionalField()]
        private bool IsAdminField;
        
        [OptionalField()]
        private string LastnameField;
        
        [OptionalField()]
        private string PasswordField;
        
        [OptionalField()]
        private Project[] ProjectsField;
        
        [OptionalField()]
        private Time[] TimesField;
        
        [OptionalField()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [DataMember()]
        public Department Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [DataMember()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [DataMember()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [DataMember()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [DataMember()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [DataMember()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [DataMember()]
        public Project[] Projects {
            get {
                return this.ProjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectsField, value) != true)) {
                    this.ProjectsField = value;
                    this.RaisePropertyChanged("Projects");
                }
            }
        }
        
        [DataMember()]
        public Time[] Times {
            get {
                return this.TimesField;
            }
            set {
                if ((object.ReferenceEquals(this.TimesField, value) != true)) {
                    this.TimesField = value;
                    this.RaisePropertyChanged("Times");
                }
            }
        }
        
        [DataMember()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="TimeDataMember", Namespace="http://schemas.datacontract.org/2004/07/Timer.Wcf.DataMembers")]
    [Serializable()]
    public partial class TimeDataMember : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private int BreakField;
        
        [OptionalField()]
        private string EndTimeField;
        
        [OptionalField()]
        private string NoteField;
        
        [OptionalField()]
        private Project[] ProjectsField;
        
        [OptionalField()]
        private string StartTimeField;
        
        [OptionalField()]
        private int TimeIdField;
        
        [OptionalField()]
        private User[] UsersField;
        
        [OptionalField()]
        private System.DateTime WorkDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public int Break {
            get {
                return this.BreakField;
            }
            set {
                if ((this.BreakField.Equals(value) != true)) {
                    this.BreakField = value;
                    this.RaisePropertyChanged("Break");
                }
            }
        }
        
        [DataMember()]
        public string EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EndTimeField, value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [DataMember()]
        public string Note {
            get {
                return this.NoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteField, value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
        
        [DataMember()]
        public Project[] Projects {
            get {
                return this.ProjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectsField, value) != true)) {
                    this.ProjectsField = value;
                    this.RaisePropertyChanged("Projects");
                }
            }
        }
        
        [DataMember()]
        public string StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.StartTimeField, value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [DataMember()]
        public int TimeId {
            get {
                return this.TimeIdField;
            }
            set {
                if ((this.TimeIdField.Equals(value) != true)) {
                    this.TimeIdField = value;
                    this.RaisePropertyChanged("TimeId");
                }
            }
        }
        
        [DataMember()]
        public User[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        [DataMember()]
        public System.DateTime WorkDate {
            get {
                return this.WorkDateField;
            }
            set {
                if ((this.WorkDateField.Equals(value) != true)) {
                    this.WorkDateField = value;
                    this.RaisePropertyChanged("WorkDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="ProjectDataMember", Namespace="http://schemas.datacontract.org/2004/07/Timer.Wcf.DataMembers")]
    [Serializable()]
    public partial class ProjectDataMember : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string ProjectDescriptionField;
        
        [OptionalField()]
        private int ProjectIdField;
        
        [OptionalField()]
        private string ProjectNameField;
        
        [OptionalField()]
        private Time[] TimesField;
        
        [OptionalField()]
        private User[] UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string ProjectDescription {
            get {
                return this.ProjectDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectDescriptionField, value) != true)) {
                    this.ProjectDescriptionField = value;
                    this.RaisePropertyChanged("ProjectDescription");
                }
            }
        }
        
        [DataMember()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [DataMember()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [DataMember()]
        public Time[] Times {
            get {
                return this.TimesField;
            }
            set {
                if ((object.ReferenceEquals(this.TimesField, value) != true)) {
                    this.TimesField = value;
                    this.RaisePropertyChanged("Times");
                }
            }
        }
        
        [DataMember()]
        public User[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="DepartmentDataMember", Namespace="http://schemas.datacontract.org/2004/07/Timer.Wcf.DataMembers")]
    [Serializable()]
    public partial class DepartmentDataMember : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string DepartmentEmailField;
        
        [OptionalField()]
        private int DepartmentIdField;
        
        [OptionalField()]
        private string DepartmentNameField;
        
        [OptionalField()]
        private User[] UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string DepartmentEmail {
            get {
                return this.DepartmentEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentEmailField, value) != true)) {
                    this.DepartmentEmailField = value;
                    this.RaisePropertyChanged("DepartmentEmail");
                }
            }
        }
        
        [DataMember()]
        public int DepartmentId {
            get {
                return this.DepartmentIdField;
            }
            set {
                if ((this.DepartmentIdField.Equals(value) != true)) {
                    this.DepartmentIdField = value;
                    this.RaisePropertyChanged("DepartmentId");
                }
            }
        }
        
        [DataMember()]
        public string DepartmentName {
            get {
                return this.DepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentNameField, value) != true)) {
                    this.DepartmentNameField = value;
                    this.RaisePropertyChanged("DepartmentName");
                }
            }
        }
        
        [DataMember()]
        public User[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TimerService.ITimerService")]
    public interface ITimerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncUsers", ReplyAction="http://tempuri.org/ITimerService/GetAsyncUsersResponse")]
        UserDataMember[] GetAsyncUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncUsers", ReplyAction="http://tempuri.org/ITimerService/GetAsyncUsersResponse")]
        System.Threading.Tasks.Task<UserDataMember[]> GetAsyncUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncUser", ReplyAction="http://tempuri.org/ITimerService/GetAsyncUserResponse")]
        UserDataMember GetAsyncUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncUser", ReplyAction="http://tempuri.org/ITimerService/GetAsyncUserResponse")]
        System.Threading.Tasks.Task<UserDataMember> GetAsyncUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/CreateAsyncUser", ReplyAction="http://tempuri.org/ITimerService/CreateAsyncUserResponse")]
        bool CreateAsyncUser(UserDataMember user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/CreateAsyncUser", ReplyAction="http://tempuri.org/ITimerService/CreateAsyncUserResponse")]
        System.Threading.Tasks.Task<bool> CreateAsyncUserAsync(UserDataMember user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/UpdateAsyncUser", ReplyAction="http://tempuri.org/ITimerService/UpdateAsyncUserResponse")]
        bool UpdateAsyncUser(UserDataMember user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/UpdateAsyncUser", ReplyAction="http://tempuri.org/ITimerService/UpdateAsyncUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsyncUserAsync(UserDataMember user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/DeleteAsyncUser", ReplyAction="http://tempuri.org/ITimerService/DeleteAsyncUserResponse")]
        bool DeleteAsyncUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/DeleteAsyncUser", ReplyAction="http://tempuri.org/ITimerService/DeleteAsyncUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsyncUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncTimes", ReplyAction="http://tempuri.org/ITimerService/GetAsyncTimesResponse")]
        TimeDataMember[] GetAsyncTimes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncTimes", ReplyAction="http://tempuri.org/ITimerService/GetAsyncTimesResponse")]
        System.Threading.Tasks.Task<TimeDataMember[]> GetAsyncTimesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncTime", ReplyAction="http://tempuri.org/ITimerService/GetAsyncTimeResponse")]
        TimeDataMember GetAsyncTime(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncTime", ReplyAction="http://tempuri.org/ITimerService/GetAsyncTimeResponse")]
        System.Threading.Tasks.Task<TimeDataMember> GetAsyncTimeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/CreateAsyncTime", ReplyAction="http://tempuri.org/ITimerService/CreateAsyncTimeResponse")]
        bool CreateAsyncTime(TimeDataMember time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/CreateAsyncTime", ReplyAction="http://tempuri.org/ITimerService/CreateAsyncTimeResponse")]
        System.Threading.Tasks.Task<bool> CreateAsyncTimeAsync(TimeDataMember time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/UpdateAsyncTime", ReplyAction="http://tempuri.org/ITimerService/UpdateAsyncTimeResponse")]
        bool UpdateAsyncTime(TimeDataMember time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/UpdateAsyncTime", ReplyAction="http://tempuri.org/ITimerService/UpdateAsyncTimeResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsyncTimeAsync(TimeDataMember time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/DeleteAsyncTime", ReplyAction="http://tempuri.org/ITimerService/DeleteAsyncTimeResponse")]
        bool DeleteAsyncTime(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/DeleteAsyncTime", ReplyAction="http://tempuri.org/ITimerService/DeleteAsyncTimeResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsyncTimeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncProjects", ReplyAction="http://tempuri.org/ITimerService/GetAsyncProjectsResponse")]
        ProjectDataMember[] GetAsyncProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncProjects", ReplyAction="http://tempuri.org/ITimerService/GetAsyncProjectsResponse")]
        System.Threading.Tasks.Task<ProjectDataMember[]> GetAsyncProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncProject", ReplyAction="http://tempuri.org/ITimerService/GetAsyncProjectResponse")]
        ProjectDataMember GetAsyncProject(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncProject", ReplyAction="http://tempuri.org/ITimerService/GetAsyncProjectResponse")]
        System.Threading.Tasks.Task<ProjectDataMember> GetAsyncProjectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/CreateAsyncProject", ReplyAction="http://tempuri.org/ITimerService/CreateAsyncProjectResponse")]
        bool CreateAsyncProject(ProjectDataMember project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/CreateAsyncProject", ReplyAction="http://tempuri.org/ITimerService/CreateAsyncProjectResponse")]
        System.Threading.Tasks.Task<bool> CreateAsyncProjectAsync(ProjectDataMember project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/UpdateAsyncProject", ReplyAction="http://tempuri.org/ITimerService/UpdateAsyncProjectResponse")]
        bool UpdateAsyncProject(ProjectDataMember project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/UpdateAsyncProject", ReplyAction="http://tempuri.org/ITimerService/UpdateAsyncProjectResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsyncProjectAsync(ProjectDataMember project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/DeleteAsyncProject", ReplyAction="http://tempuri.org/ITimerService/DeleteAsyncProjectResponse")]
        bool DeleteAsyncProject(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/DeleteAsyncProject", ReplyAction="http://tempuri.org/ITimerService/DeleteAsyncProjectResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsyncProjectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncDepartments", ReplyAction="http://tempuri.org/ITimerService/GetAsyncDepartmentsResponse")]
        DepartmentDataMember[] GetAsyncDepartments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncDepartments", ReplyAction="http://tempuri.org/ITimerService/GetAsyncDepartmentsResponse")]
        System.Threading.Tasks.Task<DepartmentDataMember[]> GetAsyncDepartmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncDepartment", ReplyAction="http://tempuri.org/ITimerService/GetAsyncDepartmentResponse")]
        DepartmentDataMember GetAsyncDepartment(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/GetAsyncDepartment", ReplyAction="http://tempuri.org/ITimerService/GetAsyncDepartmentResponse")]
        System.Threading.Tasks.Task<DepartmentDataMember> GetAsyncDepartmentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/CreateAsyncDepartment", ReplyAction="http://tempuri.org/ITimerService/CreateAsyncDepartmentResponse")]
        bool CreateAsyncDepartment(DepartmentDataMember department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/CreateAsyncDepartment", ReplyAction="http://tempuri.org/ITimerService/CreateAsyncDepartmentResponse")]
        System.Threading.Tasks.Task<bool> CreateAsyncDepartmentAsync(DepartmentDataMember department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/UpdateAsyncDepartment", ReplyAction="http://tempuri.org/ITimerService/UpdateAsyncDepartmentResponse")]
        bool UpdateAsyncDepartment(DepartmentDataMember department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/UpdateAsyncDepartment", ReplyAction="http://tempuri.org/ITimerService/UpdateAsyncDepartmentResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsyncDepartmentAsync(DepartmentDataMember department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/DeleteAsyncDepartment", ReplyAction="http://tempuri.org/ITimerService/DeleteAsyncDepartmentResponse")]
        bool DeleteAsyncDepartment(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/DeleteAsyncDepartment", ReplyAction="http://tempuri.org/ITimerService/DeleteAsyncDepartmentResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsyncDepartmentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/SendMessage", ReplyAction="http://tempuri.org/ITimerService/SendMessageResponse")]
        bool SendMessage(string from, string to, string subject, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/SendMessage", ReplyAction="http://tempuri.org/ITimerService/SendMessageResponse")]
        System.Threading.Tasks.Task<bool> SendMessageAsync(string from, string to, string subject, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/RetrieveTimeForUser", ReplyAction="http://tempuri.org/ITimerService/RetrieveTimeForUserResponse")]
        TimeDataMember[] RetrieveTimeForUser(int userId, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimerService/RetrieveTimeForUser", ReplyAction="http://tempuri.org/ITimerService/RetrieveTimeForUserResponse")]
        System.Threading.Tasks.Task<TimeDataMember[]> RetrieveTimeForUserAsync(int userId, System.DateTime from, System.DateTime to);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITimerServiceChannel : ITimerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimerServiceClient : System.ServiceModel.ClientBase<ITimerService>, ITimerService {
        
        public TimerServiceClient() {
        }
        
        public TimerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TimerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public UserDataMember[] GetAsyncUsers() {
            return base.Channel.GetAsyncUsers();
        }
        
        public System.Threading.Tasks.Task<UserDataMember[]> GetAsyncUsersAsync() {
            return base.Channel.GetAsyncUsersAsync();
        }
        
        public UserDataMember GetAsyncUser(int id) {
            return base.Channel.GetAsyncUser(id);
        }
        
        public System.Threading.Tasks.Task<UserDataMember> GetAsyncUserAsync(int id) {
            return base.Channel.GetAsyncUserAsync(id);
        }
        
        public bool CreateAsyncUser(UserDataMember user) {
            return base.Channel.CreateAsyncUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAsyncUserAsync(UserDataMember user) {
            return base.Channel.CreateAsyncUserAsync(user);
        }
        
        public bool UpdateAsyncUser(UserDataMember user) {
            return base.Channel.UpdateAsyncUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsyncUserAsync(UserDataMember user) {
            return base.Channel.UpdateAsyncUserAsync(user);
        }
        
        public bool DeleteAsyncUser(int id) {
            return base.Channel.DeleteAsyncUser(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsyncUserAsync(int id) {
            return base.Channel.DeleteAsyncUserAsync(id);
        }
        
        public TimeDataMember[] GetAsyncTimes() {
            return base.Channel.GetAsyncTimes();
        }
        
        public System.Threading.Tasks.Task<TimeDataMember[]> GetAsyncTimesAsync() {
            return base.Channel.GetAsyncTimesAsync();
        }
        
        public TimeDataMember GetAsyncTime(int id) {
            return base.Channel.GetAsyncTime(id);
        }
        
        public System.Threading.Tasks.Task<TimeDataMember> GetAsyncTimeAsync(int id) {
            return base.Channel.GetAsyncTimeAsync(id);
        }
        
        public bool CreateAsyncTime(TimeDataMember time) {
            return base.Channel.CreateAsyncTime(time);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAsyncTimeAsync(TimeDataMember time) {
            return base.Channel.CreateAsyncTimeAsync(time);
        }
        
        public bool UpdateAsyncTime(TimeDataMember time) {
            return base.Channel.UpdateAsyncTime(time);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsyncTimeAsync(TimeDataMember time) {
            return base.Channel.UpdateAsyncTimeAsync(time);
        }
        
        public bool DeleteAsyncTime(int id) {
            return base.Channel.DeleteAsyncTime(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsyncTimeAsync(int id) {
            return base.Channel.DeleteAsyncTimeAsync(id);
        }
        
        public ProjectDataMember[] GetAsyncProjects() {
            return base.Channel.GetAsyncProjects();
        }
        
        public System.Threading.Tasks.Task<ProjectDataMember[]> GetAsyncProjectsAsync() {
            return base.Channel.GetAsyncProjectsAsync();
        }
        
        public ProjectDataMember GetAsyncProject(int id) {
            return base.Channel.GetAsyncProject(id);
        }
        
        public System.Threading.Tasks.Task<ProjectDataMember> GetAsyncProjectAsync(int id) {
            return base.Channel.GetAsyncProjectAsync(id);
        }
        
        public bool CreateAsyncProject(ProjectDataMember project) {
            return base.Channel.CreateAsyncProject(project);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAsyncProjectAsync(ProjectDataMember project) {
            return base.Channel.CreateAsyncProjectAsync(project);
        }
        
        public bool UpdateAsyncProject(ProjectDataMember project) {
            return base.Channel.UpdateAsyncProject(project);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsyncProjectAsync(ProjectDataMember project) {
            return base.Channel.UpdateAsyncProjectAsync(project);
        }
        
        public bool DeleteAsyncProject(int id) {
            return base.Channel.DeleteAsyncProject(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsyncProjectAsync(int id) {
            return base.Channel.DeleteAsyncProjectAsync(id);
        }
        
        public DepartmentDataMember[] GetAsyncDepartments() {
            return base.Channel.GetAsyncDepartments();
        }
        
        public System.Threading.Tasks.Task<DepartmentDataMember[]> GetAsyncDepartmentsAsync() {
            return base.Channel.GetAsyncDepartmentsAsync();
        }
        
        public DepartmentDataMember GetAsyncDepartment(int id) {
            return base.Channel.GetAsyncDepartment(id);
        }
        
        public System.Threading.Tasks.Task<DepartmentDataMember> GetAsyncDepartmentAsync(int id) {
            return base.Channel.GetAsyncDepartmentAsync(id);
        }
        
        public bool CreateAsyncDepartment(DepartmentDataMember department) {
            return base.Channel.CreateAsyncDepartment(department);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAsyncDepartmentAsync(DepartmentDataMember department) {
            return base.Channel.CreateAsyncDepartmentAsync(department);
        }
        
        public bool UpdateAsyncDepartment(DepartmentDataMember department) {
            return base.Channel.UpdateAsyncDepartment(department);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsyncDepartmentAsync(DepartmentDataMember department) {
            return base.Channel.UpdateAsyncDepartmentAsync(department);
        }
        
        public bool DeleteAsyncDepartment(int id) {
            return base.Channel.DeleteAsyncDepartment(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsyncDepartmentAsync(int id) {
            return base.Channel.DeleteAsyncDepartmentAsync(id);
        }
        
        public bool SendMessage(string from, string to, string subject, string message) {
            return base.Channel.SendMessage(from, to, subject, message);
        }
        
        public System.Threading.Tasks.Task<bool> SendMessageAsync(string from, string to, string subject, string message) {
            return base.Channel.SendMessageAsync(from, to, subject, message);
        }
        
        public TimeDataMember[] RetrieveTimeForUser(int userId, System.DateTime from, System.DateTime to) {
            return base.Channel.RetrieveTimeForUser(userId, from, to);
        }
        
        public System.Threading.Tasks.Task<TimeDataMember[]> RetrieveTimeForUserAsync(int userId, System.DateTime from, System.DateTime to) {
            return base.Channel.RetrieveTimeForUserAsync(userId, from, to);
        }
    }
}
